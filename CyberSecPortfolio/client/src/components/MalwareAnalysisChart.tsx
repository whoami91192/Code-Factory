import { useEffect, useRef, useState } from 'react'
import * as d3 from 'd3'
import { 
  FileText, 
  AlertTriangle, 
  Shield, 
  BarChart3, 
  PieChart,
  TrendingUp,
  Zap,
  Eye
} from 'lucide-react'

interface MalwareSample {
  id: string
  name: string
  type: 'trojan' | 'ransomware' | 'spyware' | 'virus' | 'worm' | 'backdoor'
  size: number
  entropy: number
  threatLevel: 'low' | 'medium' | 'high' | 'critical'
  detectionRate: number
  family: string
  timestamp: Date
  signatures: string[]
  behavior: string[]
}

const MalwareAnalysisChart = () => {
  const svgRef = useRef<SVGSVGElement>(null)
  const [samples, setSamples] = useState<MalwareSample[]>([])
  const [selectedSample, setSelectedSample] = useState<MalwareSample | null>(null)
  const [chartType, setChartType] = useState<'entropy' | 'distribution' | 'timeline'>('entropy')

  // Generate sample malware data
  const generateMalwareData = (): MalwareSample[] => {
    const types = ['trojan', 'ransomware', 'spyware', 'virus', 'worm', 'backdoor']
    const families = ['Zeus', 'WannaCry', 'Emotet', 'TrickBot', 'Ryuk', 'Dridex', 'Lokibot']
    const behaviors = [
      'File encryption', 'Data exfiltration', 'Keylogging', 'Screen capture',
      'Network scanning', 'Privilege escalation', 'Persistence', 'Anti-analysis'
    ]
    const signatures = [
      'Trojan.Win32.Generic', 'Ransom.WannaCry', 'Spyware.Keylogger',
      'Virus.Win32.Generic', 'Worm.Network', 'Backdoor.Remote'
    ]

    return Array.from({ length: 50 }, (_, i) => ({
      id: `sample-${i}`,
      name: `malware_${Math.random().toString(36).substr(2, 8)}.exe`,
      type: types[Math.floor(Math.random() * types.length)] as any,
      size: Math.floor(Math.random() * 10000000) + 10000,
      entropy: Math.random() * 8 + 0.5, // 0.5 to 8.5
      threatLevel: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] as any,
      detectionRate: Math.random() * 100,
      family: families[Math.floor(Math.random() * families.length)],
      timestamp: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Last 30 days
      signatures: [signatures[Math.floor(Math.random() * signatures.length)]],
      behavior: behaviors.slice(0, Math.floor(Math.random() * 4) + 1)
    }))
  }

  useEffect(() => {
    setSamples(generateMalwareData())
  }, [])

  useEffect(() => {
    if (!svgRef.current || samples.length === 0) return

    const svg = d3.select(svgRef.current)
    const margin = { top: 20, right: 20, bottom: 40, left: 60 }
    const width = 800 - margin.left - margin.right
    const height = 400 - margin.top - margin.bottom

    // Clear previous content
    svg.selectAll('*').remove()

    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`)

    if (chartType === 'entropy') {
      renderEntropyChart(g, width, height)
    } else if (chartType === 'distribution') {
      renderDistributionChart(g, width, height)
    } else if (chartType === 'timeline') {
      renderTimelineChart(g, width, height)
    }

  }, [samples, chartType])

  const renderEntropyChart = (g: d3.Selection<SVGGElement, unknown, null, undefined>, width: number, height: number) => {
    // Create scales
    const xScale = d3.scaleLinear()
      .domain([0, d3.max(samples, d => d.entropy) || 8])
      .range([0, width])

    const yScale = d3.scaleLinear()
      .domain([0, d3.max(samples, d => d.size) || 10000000])
      .range([height, 0])

    const colorScale = d3.scaleOrdinal()
      .domain(['low', 'medium', 'high', 'critical'])
      .range(['#00ff41', '#ffff00', '#ff8000', '#ff0040'])

    // Add axes
    g.append('g')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(xScale))
      .append('text')
      .attr('x', width / 2)
      .attr('y', 35)
      .attr('text-anchor', 'middle')
      .attr('fill', '#ffffff')
      .text('Entropy Score')

    g.append('g')
      .call(d3.axisLeft(yScale))
      .append('text')
      .attr('transform', 'rotate(-90)')
      .attr('y', -40)
      .attr('x', -height / 2)
      .attr('text-anchor', 'middle')
      .attr('fill', '#ffffff')
      .text('File Size (bytes)')

    // Add scatter plot
    g.selectAll('circle')
      .data(samples)
      .enter()
      .append('circle')
      .attr('cx', d => xScale(d.entropy))
      .attr('cy', d => yScale(d.size))
      .attr('r', 6)
      .attr('fill', (d: any) => colorScale(d.threatLevel))
      .attr('stroke', '#ffffff')
      .attr('stroke-width', 1)
      .style('cursor', 'pointer')
      .on('click', function(event, d) { setSelectedSample(d); return null; })
      .on('mouseover', function(event, d) {
        d3.select(this).attr('r', 8)
        // Add tooltip
        const tooltip = d3.select('body').append('div')
          .attr('class', 'tooltip')
          .style('position', 'absolute')
          .style('background', '#0a0a0a')
          .style('border', '1px solid #00ff41')
          .style('padding', '8px')
          .style('border-radius', '4px')
          .style('color', '#ffffff')
          .style('font-size', '12px')
          .style('pointer-events', 'none')
          .style('z-index', '1000')
        
        tooltip.html(`
          <strong>${d.name}</strong><br/>
          Type: ${d.type}<br/>
          Entropy: ${d.entropy.toFixed(2)}<br/>
          Size: ${(d.size / 1024).toFixed(1)} KB<br/>
          Threat: ${d.threatLevel}
        `)
          .style('left', (event.pageX + 10) + 'px')
          .style('top', (event.pageY - 10) + 'px')
      })
      .on('mouseout', function() {
        d3.select(this).attr('r', 6)
        d3.selectAll('.tooltip').remove()
      })

    // Add entropy threshold lines
    const thresholds = [3, 6, 7.5]
    thresholds.forEach((threshold, i) => {
      g.append('line')
        .attr('x1', xScale(threshold))
        .attr('y1', 0)
        .attr('x2', xScale(threshold))
        .attr('y2', height)
        .attr('stroke', ['#00ff41', '#ffff00', '#ff0040'][i])
        .attr('stroke-width', 1)
        .attr('stroke-dasharray', '5,5')
        .attr('opacity', 0.5)

      g.append('text')
        .attr('x', xScale(threshold) + 5)
        .attr('y', 20)
        .attr('fill', ['#00ff41', '#ffff00', '#ff0040'][i])
        .attr('font-size', '12px')
        .text(`Threshold ${i + 1}`)
    })
  }

  const renderDistributionChart = (g: d3.Selection<SVGGElement, unknown, null, undefined>, width: number, height: number) => {
    // Group data by type
    const typeData = d3.group(samples, d => d.type)
    const pieData = Array.from(typeData, ([type, samples]) => ({
      type,
      count: samples.length,
      avgEntropy: d3.mean(samples, d => d.entropy) || 0
    }))

    // Create pie chart
    const radius = Math.min(width, height) / 2 - 40
    const pie = d3.pie<typeof pieData[0]>()
      .value(d => d.count)

    const arc = d3.arc<d3.PieArcDatum<typeof pieData[0]>>()
      .innerRadius(0)
      .outerRadius(radius)

    const colorScale = d3.scaleOrdinal()
      .domain(pieData.map(d => d.type))
      .range(['#00ff41', '#ffff00', '#ff8000', '#ff0040', '#8000ff', '#0080ff'])

    // Add pie slices
    g.selectAll('path')
      .data(pie(pieData))
      .enter()
      .append('path')
      .attr('d', arc as any)
      .attr('fill', d => colorScale(d.data.type))
      .attr('stroke', '#ffffff')
      .attr('stroke-width', 2)
      .style('cursor', 'pointer')
      .on('click', (event, d) => {
        const samplesOfType = samples.filter(s => s.type === d.data.type)
        setSelectedSample(samplesOfType[0])
      })

    // Add labels
    g.selectAll('text')
      .data(pie(pieData))
      .enter()
      .append('text')
      .attr('transform', d => `translate(${arc.centroid(d)})`)
      .attr('text-anchor', 'middle')
      .attr('fill', '#ffffff')
      .attr('font-size', '12px')
      .text(d => `${d.data.type}\n${d.data.count}`)

    // Add legend
    const legend = g.append('g')
      .attr('transform', `translate(${width - 150}, 20)`)

    legend.selectAll('rect')
      .data(pieData)
      .enter()
      .append('rect')
      .attr('x', 0)
      .attr('y', (d, i) => i * 20)
      .attr('width', 15)
      .attr('height', 15)
      .attr('fill', d => colorScale(d.type))

    legend.selectAll('text')
      .data(pieData)
      .enter()
      .append('text')
      .attr('x', 20)
      .attr('y', (d, i) => i * 20 + 12)
      .attr('fill', '#ffffff')
      .attr('font-size', '12px')
      .text(d => `${d.type} (${d.count})`)
  }

  const renderTimelineChart = (g: d3.Selection<SVGGElement, unknown, null, undefined>, width: number, height: number) => {
    // Group by date
    const timeData = d3.group(samples, d => d3.timeDay(d.timestamp))
    const timelineData = Array.from(timeData, ([date, samples]) => ({
      date,
      count: samples.length,
      avgEntropy: d3.mean(samples, d => d.entropy) || 0,
      criticalCount: samples.filter(s => s.threatLevel === 'critical').length
    })).sort((a, b) => a.date.getTime() - b.date.getTime())

    // Create scales
    const xScale = d3.scaleTime()
      .domain(d3.extent(timelineData, d => d.date) as [Date, Date])
      .range([0, width])

    const yScale = d3.scaleLinear()
      .domain([0, d3.max(timelineData, d => d.count) || 10])
      .range([height, 0])

    // Add axes
    g.append('g')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(xScale))
      .append('text')
      .attr('x', width / 2)
      .attr('y', 35)
      .attr('text-anchor', 'middle')
      .attr('fill', '#ffffff')
      .text('Date')

    g.append('g')
      .call(d3.axisLeft(yScale))
      .append('text')
      .attr('transform', 'rotate(-90)')
      .attr('y', -40)
      .attr('x', -height / 2)
      .attr('text-anchor', 'middle')
      .attr('fill', '#ffffff')
      .text('Sample Count')

    // Add line
    const line = d3.line<typeof timelineData[0]>()
      .x(d => xScale(d.date))
      .y(d => yScale(d.count))

    g.append('path')
      .datum(timelineData)
      .attr('fill', 'none')
      .attr('stroke', '#00ff41')
      .attr('stroke-width', 2)
      .attr('d', line as any)

    // Add points
    g.selectAll('circle')
      .data(timelineData)
      .enter()
      .append('circle')
      .attr('cx', d => xScale(d.date))
      .attr('cy', d => yScale(d.count))
      .attr('r', 4)
      .attr('fill', d => d.criticalCount > 0 ? '#ff0040' : '#00ff41')
      .attr('stroke', '#ffffff')
      .attr('stroke-width', 1)
  }

  const getThreatLevelColor = (level: string) => {
    switch (level) {
      case 'low': return 'text-cyber-green'
      case 'medium': return 'text-cyber-yellow'
      case 'high': return 'text-cyber-orange'
      case 'critical': return 'text-cyber-red'
      default: return 'text-muted-foreground'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'trojan': return <Shield className="h-4 w-4" />
      case 'ransomware': return <AlertTriangle className="h-4 w-4" />
      case 'spyware': return <Eye className="h-4 w-4" />
      case 'virus': return <Zap className="h-4 w-4" />
      case 'worm': return <BarChart3 className="h-4 w-4" />
      case 'backdoor': return <FileText className="h-4 w-4" />
      default: return <AlertTriangle className="h-4 w-4" />
    }
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-cyber font-bold mb-4">
          Malware <span className="text-cyber-green">Analysis</span>
        </h2>
        <p className="text-muted-foreground">
          Advanced malware analysis with entropy visualization and threat classification
        </p>
      </div>

      <div className="grid lg:grid-cols-1 gap-6">
        {/* Sample Details */}
        <div className="lg:col-span-1">
          <div className="cyber-card">
            <h3 className="text-lg font-bold mb-4 flex items-center">
              <FileText className="h-5 w-5 mr-2 text-cyber-green" />
              Malware Samples
            </h3>
            
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {samples.slice(0, 10).map((sample) => (
                <div
                  key={sample.id}
                  className={`p-3 rounded-md cursor-pointer transition-all duration-300 ${
                    selectedSample?.id === sample.id 
                      ? 'bg-cyber-green/20 border border-cyber-green' 
                      : 'bg-muted/50 hover:bg-muted'
                  }`}
                  onClick={() => setSelectedSample(sample)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      {getTypeIcon(sample.type)}
                      <span className="font-medium text-sm truncate">
                        {sample.name}
                      </span>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded ${getThreatLevelColor(sample.threatLevel)} bg-${sample.threatLevel === 'low' ? 'cyber-green' : sample.threatLevel === 'medium' ? 'cyber-yellow' : sample.threatLevel === 'high' ? 'cyber-orange' : 'cyber-red'}/20`}>
                      {sample.threatLevel}
                    </span>
                  </div>
                  
                  <div className="text-xs text-muted-foreground space-y-1">
                    <div>Entropy: {sample.entropy.toFixed(2)}</div>
                    <div>Size: {(sample.size / 1024).toFixed(1)} KB</div>
                    <div>Detection: {sample.detectionRate.toFixed(1)}%</div>
                    <div>Family: {sample.family}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Selected Sample Details */}
          {selectedSample && (
            <div className="cyber-card mt-4">
              <h3 className="text-lg font-bold mb-4 flex items-center">
                {getTypeIcon(selectedSample.type)}
                <span className="ml-2">{selectedSample.name}</span>
              </h3>
              
              <div className="space-y-3">
                <div>
                  <label className="text-sm font-medium">Type</label>
                  <div className="text-sm mt-1 capitalize">{selectedSample.type}</div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Threat Level</label>
                  <div className={`text-sm mt-1 ${getThreatLevelColor(selectedSample.threatLevel)}`}>
                    {selectedSample.threatLevel.toUpperCase()}
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Entropy Score</label>
                  <div className="text-sm mt-1">
                    {selectedSample.entropy.toFixed(2)} / 8.0
                    <div className="w-full bg-muted rounded-full h-2 mt-1">
                      <div
                        className="bg-cyber-green h-2 rounded-full"
                        style={{ width: `${(selectedSample.entropy / 8) * 100}%` }}
                      />
                    </div>
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">File Size</label>
                  <div className="text-sm mt-1">
                    {(selectedSample.size / 1024).toFixed(1)} KB
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Detection Rate</label>
                  <div className="text-sm mt-1">
                    {selectedSample.detectionRate.toFixed(1)}%
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Malware Family</label>
                  <div className="text-sm mt-1">{selectedSample.family}</div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Signatures</label>
                  <div className="text-sm mt-1">
                    {selectedSample.signatures.map((sig, i) => (
                      <div key={i} className="text-cyber-green font-mono text-xs">
                        {sig}
                      </div>
                    ))}
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Behavior</label>
                  <div className="text-sm mt-1">
                    {selectedSample.behavior.map((behavior, i) => (
                      <div key={i} className="text-xs px-2 py-1 bg-cyber-dark border border-cyber-green/30 rounded mb-1">
                        {behavior}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default MalwareAnalysisChart 