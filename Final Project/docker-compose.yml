version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: food_ordering_db
    environment:
      POSTGRES_DB: food_ordering_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - food_ordering_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food_ordering_backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/food_ordering_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
      JWT_SECRET: your_jwt_secret_key_here_make_it_long_and_secure_for_production
      JWT_EXPIRATION: 900000
      JWT_REFRESH_EXPIRATION: 604800000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - food_ordering_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 5

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: food_ordering_frontend
    environment:
      REACT_APP_API_URL: http://backend:8080/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - food_ordering_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  food_ordering_network:
    driver: bridge
